@use "sass:math";

@keyframes horizontal-shaking {
	0% { transform: translateX(0) }
	25% { transform: translateX(5px) }
	50% { transform: translateX(-5px) }
	75% { transform: translateX(5px) }
	100% { transform: translateX(0) }
}

$cell-bg-hover: red;
$cell-size-percentage-of-parent: math.div(100%, 8);

.shake{
	animation: horizontal-shaking 350ms infinite;
}

.game-area{
	display: flex;
    justify-content: center;
}

.board{
	$height: 8;
	$width: 8;

	$cellHeightPercent: calc(100% / $height);
	$cellWidthPercent: calc(100% / $width);

	$highlightColor: #0071ff;

	display: inline-block;
	position: relative;

	$minBoardSizePixels: 300px;
	$maxBoardSizePixels: 900px;

	min-height: $minBoardSizePixels;
	min-width: $minBoardSizePixels;
	max-width: $maxBoardSizePixels;
	max-height: $maxBoardSizePixels;
	
	width: 50%;

	&:after {
		content: "";
		display: block;
		padding-bottom: 100%;
	}

	background-image: url('../../img/boards/chess-board-purple.png');
	background-size: contain;
	
	.moves{
		position: absolute;
		height: 100%;
		width: 100%;		

		pointer-events: none;

		move{
			display: inline-block;
			cursor: pointer;
			pointer-events: auto;
			z-index: 1;

			height: $cellHeightPercent;	// 100/8
			width: $cellWidthPercent;	// 100/8

			position: absolute !important;
			@for $x from 0 through $width {
				&[x='#{$x}']{
					left: #{$x * $cellWidthPercent};
				}
			}
			@for $y from 0 through $height {
				&[y='#{$y}']{
					top: #{100% - ($y + 1) * $cellHeightPercent};
				}
			}

			position: relative;
			text-align: center;
			text-align: center;

			$move-overlay-opacity: 0.20;

			&.is-move::before{
				$dot-width: 25%;
				content: "";
				border-radius: 50%;
				display: inline-block;
				height: $dot-width;
				width: $dot-width;
				background-color: rgb(0, 0, 0, $move-overlay-opacity);
				position: absolute;
				left: 50%;
				top: 50%;
				margin-left: calc($dot-width * -0.5);
				margin-top: calc($dot-width * -0.5);
			}

			&.is-attack::before{
				$dot-width: 122%;
				opacity: $move-overlay-opacity;
				content: url('data:image/svg+xml; utf8, <svg viewBox="0 0 100 100" xmlns="http://www.w3.org/2000/svg"><circle cx="50" cy="50" r="35" stroke="black" stroke-width="4" fill="none" /></svg>');
				border-radius: 50%;
				display: inline-block;
				height: $dot-width;
				width: $dot-width;
				position: absolute;
				left: 50%;
				top: 50%;
				margin-left: calc($dot-width * -0.5);
				margin-top: calc($dot-width * -0.5);
			}
		}
	}
	.pieces{
		position: absolute;
		height: 100%;
		width: 100%;		
		piece{
			display: inline-block;
			cursor: pointer;

			height: $cellHeightPercent;	// 100/8
			width: $cellWidthPercent;	// 100/8

			position: absolute !important;
			@for $x from 0 through $width {
				&[x='#{$x}']{
					left: #{$x * $cellWidthPercent};
				}
			}
			@for $y from 0 through $height {
				&[y='#{$y}']{
					top: #{100% - ($y + 1) * $cellHeightPercent};
				}
			}

			position: relative;
			text-align: center;
			text-align: center;
			svg{
				height: calc(100% - 22px);
				top: 50%;
				transform: translateY(25%);
			}

			// Capture state
			opacity: 1.0;
			transition: opacity 500ms ease;
			&.captured{
				transition: opacity 500ms ease;
				opacity: 0.0;
				pointer-events: none;
			}

			// Sprites
			background-size: contain;
			$pieceCodes: 'bk','bq','br','bb','bn','bp',
						 'wk','wq','wr','wb','wn','wp';
			@each $pieceCode in $pieceCodes {
				&.#{$pieceCode}{
					background-image: url('../../img/pieces/#{$pieceCode}.png');
				}
			}

			z-index: 1;
			&.selected{
				// Highlight in some way?
				background-color: rgba($highlightColor, .5);
			}
			&.last-selected{
				z-index: 2;
			}

			// Animations
			$moveAnimation: 500ms ease;
			transition: top #{$moveAnimation}, left #{$moveAnimation};
			
		}
	}
}